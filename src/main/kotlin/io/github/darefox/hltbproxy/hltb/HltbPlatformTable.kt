package io.github.darefox.hltbproxy.hltb

import kotlinx.serialization.Serializable

@Serializable
data class HltbPlatformTable(
    // I'm not reading allat
    // and thank god for multi-cursor
    val threeDO: HltbPlatformTime?,
    val acornArchimedes: HltbPlatformTime?,
    val amazonLuna: HltbPlatformTime?,
    val amiga: HltbPlatformTime?,
    val amigaCD32: HltbPlatformTime?,
    val amstradCPC: HltbPlatformTime?,
    val android: HltbPlatformTime?,
    val appleII: HltbPlatformTime?,
    val arcade: HltbPlatformTime?,
    val atari2600: HltbPlatformTime?,
    val atari5200: HltbPlatformTime?,
    val atari7800: HltbPlatformTime?,
    val atari8bit: HltbPlatformTime?,
    val atariJaguar: HltbPlatformTime?,
    val atariJaguarCD: HltbPlatformTime?,
    val atariLynx: HltbPlatformTime?,
    val atariST: HltbPlatformTime?,
    val bbcMicro: HltbPlatformTime?,
    val browser: HltbPlatformTime?,
    val colecoVision: HltbPlatformTime?,
    val commodore64: HltbPlatformTime?,
    val commodorePET: HltbPlatformTime?,
    val commodoreVIC20: HltbPlatformTime?,
    val dreamcast: HltbPlatformTime?,
    val emulated: HltbPlatformTime?,
    val fmTowns: HltbPlatformTime?,
    val gameAndWatch: HltbPlatformTime?,
    val gameBoy: HltbPlatformTime?,
    val gameBoyAdvance: HltbPlatformTime?,
    val gameBoyColor: HltbPlatformTime?,
    val gearVR: HltbPlatformTime?,
    val gizmondo: HltbPlatformTime?,
    val googleStadia: HltbPlatformTime?,
    val intellivision: HltbPlatformTime?,
    val interactiveMovie: HltbPlatformTime?,
    val iOS: HltbPlatformTime?,
    val linux: HltbPlatformTime?,
    val mac: HltbPlatformTime?,
    val mobile: HltbPlatformTime?,
    val mSX: HltbPlatformTime?,
    val nGage: HltbPlatformTime?,
    val necPC88: HltbPlatformTime?,
    val necPC98: HltbPlatformTime?,
    val necPCFX: HltbPlatformTime?,
    val neoGeo: HltbPlatformTime?,
    val neoGeoCD: HltbPlatformTime?,
    val neoGeoPocket: HltbPlatformTime?,
    val nES: HltbPlatformTime?,
    val nintendo3DS: HltbPlatformTime?,
    val nintendo64: HltbPlatformTime?,
    val nintendoDS: HltbPlatformTime?,
    val nintendoGameCube: HltbPlatformTime?,
    val nintendoSwitch: HltbPlatformTime?,
    val oculusGo: HltbPlatformTime?,
    val oculusQuest: HltbPlatformTime?,
    val odyssey: HltbPlatformTime?,
    val odyssey2: HltbPlatformTime?,
    val onLive: HltbPlatformTime?,
    val ouya: HltbPlatformTime?,
    val pc: HltbPlatformTime?,
    val pcVr: HltbPlatformTime?,
    val philipsCDi: HltbPlatformTime?,
    val playdate: HltbPlatformTime?,
    val playStation: HltbPlatformTime?,
    val playStation2: HltbPlatformTime?,
    val playStation3: HltbPlatformTime?,
    val playStation4: HltbPlatformTime?,
    val playStation5: HltbPlatformTime?,
    val playStationMobile: HltbPlatformTime?,
    val playStationNow: HltbPlatformTime?,
    val playStationPortable: HltbPlatformTime?,
    val playStationVita: HltbPlatformTime?,
    val playStationVR: HltbPlatformTime?,
    val plugAndPlay: HltbPlatformTime?,
    val sega32X: HltbPlatformTime?,
    val segaCD: HltbPlatformTime?,
    val segaGameGear: HltbPlatformTime?,
    val segaMasterSystem: HltbPlatformTime?,
    val segaMegaDriveOrGenesis: HltbPlatformTime?,
    val segaPico: HltbPlatformTime?,
    val segaSaturn: HltbPlatformTime?,
    val sG1000: HltbPlatformTime?,
    val sharpX1: HltbPlatformTime?,
    val sharpX68000: HltbPlatformTime?,
    val superNintendo: HltbPlatformTime?,
    val tigerHandheld: HltbPlatformTime?,
    val turboGrafx16: HltbPlatformTime?,
    val turboGrafxCD: HltbPlatformTime?,
    val virtualBoy: HltbPlatformTime?,
    val wii: HltbPlatformTime?,
    val wiiU: HltbPlatformTime?,
    val windowsPhone: HltbPlatformTime?,
    val wonderSwan: HltbPlatformTime?,
    val xbox: HltbPlatformTime?,
    val xbox360: HltbPlatformTime?,
    val xboxOne: HltbPlatformTime?,
    val xboxSeries: HltbPlatformTime?,
    val zeebo: HltbPlatformTime?,
    val zxSpectrum: HltbPlatformTime?,
    val zx81: HltbPlatformTime?,
)

@Serializable
data class HltbPlatformTime(
    val polled: Long?,
    val mainSec: Long?,
    val extraSec: Long?,
    val completionistSec: Long?,
    val fastestSec: Long?,
    val slowestSec: Long?,
)

fun HltbTableParser.toPlatform(): HltbPlatformTable {
    require(title == "Platform")

    return HltbPlatformTable(
    threeDO = rows["3DO"]?.let { getVariants(it) },
    acornArchimedes = rows["Acorn Archimedes"]?.let { getVariants(it) },
    amazonLuna = rows["Amazon Luna"]?.let { getVariants(it) },
    amiga = rows["Amiga"]?.let { getVariants(it) },
    amigaCD32 = rows["Amiga CD32"]?.let { getVariants(it) },
    amstradCPC = rows["Amstrad CPC"]?.let { getVariants(it) },
    android = rows["Android"]?.let { getVariants(it) },
    appleII = rows["Apple II"]?.let { getVariants(it) },
    arcade = rows["Arcade"]?.let { getVariants(it) },
    atari2600 = rows["Atari 2600"]?.let { getVariants(it) },
    atari5200 = rows["Atari 5200"]?.let { getVariants(it) },
    atari7800 = rows["Atari 7800"]?.let { getVariants(it) },
    atari8bit = rows["Atari 8-bit Family"]?.let { getVariants(it) },
    atariJaguar = rows["Atari Jaguar"]?.let { getVariants(it) },
    atariJaguarCD = rows["Atari Jaguar CD"]?.let { getVariants(it) },
    atariLynx = rows["Atari Lynx"]?.let { getVariants(it) },
    atariST = rows["Atari ST"]?.let { getVariants(it) },
    bbcMicro = rows["BBC Micro"]?.let { getVariants(it) },
    browser = rows["Browser"]?.let { getVariants(it) },
    colecoVision = rows["ColecoVision"]?.let { getVariants(it) },
    commodore64 = rows["Commodore 64"]?.let { getVariants(it) },
    commodorePET = rows["Commodore PET"]?.let { getVariants(it) },
    commodoreVIC20 = rows["Commodore VIC-20"]?.let { getVariants(it) },
    dreamcast = rows["Dreamcast"]?.let { getVariants(it) },
    emulated = rows["Emulated"]?.let { getVariants(it) },
    fmTowns = rows["FM Towns"]?.let { getVariants(it) },
    gameAndWatch = rows["Game & Watch"]?.let { getVariants(it) },
    gameBoy = rows["Game Boy"]?.let { getVariants(it) },
    gameBoyAdvance = rows["Game Boy Advance"]?.let { getVariants(it) },
    gameBoyColor = rows["Game Boy Color"]?.let { getVariants(it) },
    gearVR = rows["Gear VR"]?.let { getVariants(it) },
    gizmondo = rows["Gizmondo"]?.let { getVariants(it) },
    googleStadia = rows["Google Stadia"]?.let { getVariants(it) },
    intellivision = rows["Intellivision"]?.let { getVariants(it) },
    interactiveMovie = rows["Interactive Movie"]?.let { getVariants(it) },
    iOS = rows["iOS"]?.let { getVariants(it) },
    linux = rows["Linux"]?.let { getVariants(it) },
    mac = rows["Mac"]?.let { getVariants(it) },
    mobile = rows["Mobile"]?.let { getVariants(it) },
    mSX = rows["MSX"]?.let { getVariants(it) },
    nGage = rows["N-Gage"]?.let { getVariants(it) },
    necPC88 = rows["NEC PC-88"]?.let { getVariants(it) },
    necPC98 = rows["NEC PC-98"]?.let { getVariants(it) },
    necPCFX = rows["NEC PC-FX"]?.let { getVariants(it) },
    neoGeo = rows["Neo Geo"]?.let { getVariants(it) },
    neoGeoCD = rows["Neo Geo CD"]?.let { getVariants(it) },
    neoGeoPocket = rows["Neo Geo Pocket"]?.let { getVariants(it) },
    nES = rows["NES"]?.let { getVariants(it) },
    nintendo3DS = rows["Nintendo 3DS"]?.let { getVariants(it) },
    nintendo64 = rows["Nintendo 64"]?.let { getVariants(it) },
    nintendoDS = rows["Nintendo DS"]?.let { getVariants(it) },
    nintendoGameCube = rows["Nintendo GameCube"]?.let { getVariants(it) },
    nintendoSwitch = rows["Nintendo Switch"]?.let { getVariants(it) },
    oculusGo = rows["Oculus Go"]?.let { getVariants(it) },
    oculusQuest = rows["Oculus Quest"]?.let { getVariants(it) },
    odyssey = rows["Odyssey"]?.let { getVariants(it) },
    odyssey2 = rows["Odyssey 2"]?.let { getVariants(it) },
    onLive = rows["OnLive"]?.let { getVariants(it) },
    ouya = rows["Ouya"]?.let { getVariants(it) },
    pc = rows["PC"]?.let { getVariants(it) },
    pcVr = rows["PC VR"]?.let { getVariants(it) },
    philipsCDi = rows["Philips CD-i"]?.let { getVariants(it) },
    playdate = rows["Playdate"]?.let { getVariants(it) },
    playStation = rows["PlayStation"]?.let { getVariants(it) },
    playStation2 = rows["PlayStation 2"]?.let { getVariants(it) },
    playStation3 = rows["PlayStation 3"]?.let { getVariants(it) },
    playStation4 = rows["PlayStation 4"]?.let { getVariants(it) },
    playStation5 = rows["PlayStation 5"]?.let { getVariants(it) },
    playStationMobile = rows["PlayStation Mobile"]?.let { getVariants(it) },
    playStationNow = rows["PlayStation Now"]?.let { getVariants(it) },
    playStationPortable = rows["PlayStation Portable"]?.let { getVariants(it) },
    playStationVita = rows["PlayStation Vita"]?.let { getVariants(it) },
    playStationVR = rows["PlayStation VR"]?.let { getVariants(it) },
    plugAndPlay = rows["Plug & Play"]?.let { getVariants(it) },
    sega32X = rows["Sega 32X"]?.let { getVariants(it) },
    segaCD = rows["Sega CD"]?.let { getVariants(it) },
    segaGameGear = rows["Sega Game Gear"]?.let { getVariants(it) },
    segaMasterSystem = rows["Sega Master System"]?.let { getVariants(it) },
    segaMegaDriveOrGenesis = rows["Sega Mega Drive/Genesis"]?.let { getVariants(it) },
    segaPico = rows["Sega Pico"]?.let { getVariants(it) },
    segaSaturn = rows["Sega Saturn"]?.let { getVariants(it) },
    sG1000 = rows["SG-1000"]?.let { getVariants(it) },
    sharpX1 = rows["Sharp X1"]?.let { getVariants(it) },
    sharpX68000 = rows["Sharp X68000"]?.let { getVariants(it) },
    superNintendo = rows["Super Nintendo"]?.let { getVariants(it) },
    tigerHandheld = rows["Tiger Handheld"]?.let { getVariants(it) },
    turboGrafx16 = rows["TurboGrafx-16"]?.let { getVariants(it) },
    turboGrafxCD = rows["TurboGrafx-CD"]?.let { getVariants(it) },
    virtualBoy = rows["Virtual Boy"]?.let { getVariants(it) },
    wii = rows["Wii"]?.let { getVariants(it) },
    wiiU = rows["Wii U"]?.let { getVariants(it) },
    windowsPhone = rows["Windows Phone"]?.let { getVariants(it) },
    wonderSwan = rows["WonderSwan"]?.let { getVariants(it) },
    xbox = rows["Xbox"]?.let { getVariants(it) },
    xbox360 = rows["Xbox 360"]?.let { getVariants(it) },
    xboxOne = rows["Xbox One"]?.let { getVariants(it) },
    xboxSeries = rows["Xbox Series X/S"]?.let { getVariants(it) },
    zeebo = rows["Zeebo"]?.let { getVariants(it) },
    zxSpectrum = rows["ZX Spectrum"]?.let { getVariants(it) },
    zx81 = rows["ZX81"]?.let { getVariants(it) }
    )
}

private fun HltbTableParser.getVariants(column: Map<String,String>): HltbPlatformTime {
    return HltbPlatformTime(
        polled = column["Polled"]?.toLongOrNull(),
        mainSec = column["Main"]?.let { toSecondsOrNull(it) },
        extraSec = column["Main +"]?.let { toSecondsOrNull(it) },
        completionistSec = column["100%"]?.let { toSecondsOrNull(it) },
        fastestSec = column["Fastest"]?.let { toSecondsOrNull(it) },
        slowestSec = column["Slowest"]?.let { toSecondsOrNull(it) },
    )
}
